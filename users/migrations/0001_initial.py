# Generated by Django 5.2.5 on 2025-08-31 06:49

import django.core.validators
import django.utils.timezone
import users.utils.avatar_upload_path
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('first_name', models.CharField(db_index=True, max_length=30)),
                ('last_name', models.CharField(db_index=True, max_length=30)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=users.utils.avatar_upload_path.avatar_upload_to)),
                ('last_activity', models.DateTimeField(default=django.utils.timezone.now)),
                ('telegram_chat_id', models.BigIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9999999999999999999)], verbose_name='Telegram Chat ID')),
                ('is_2fa_enabled', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users_user',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['first_name'], name='first_name_idx'), models.Index(fields=['last_name'], name='last_name_idx'), models.Index(fields=['first_name', 'last_name'], name='first_last_name_idx')],
            },
        ),
    ]
